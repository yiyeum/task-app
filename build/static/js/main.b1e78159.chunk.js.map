{"version":3,"sources":["components/HeaderSort/HeaderSort.tsx","components/ListView/ListView.tsx","components/TaskForm/TaskForm.tsx","utils/helper.ts","components/List/List.tsx","utils/format.ts","components/DeleteModal/DeleteModal.tsx","components/CategoryTag/CategoryTag.tsx","components/NoListFound/NoListFound.tsx","container/TaskView/TaskView.tsx","App.tsx","assets/constants/constants.ts","serviceWorker.ts","utils/theme.ts","index.tsx","assets/images/bg.png"],"names":["styles","root","padding","backgroundImage","bgImage","backgroundRepeat","backgroundPosition","select","width","HeaderSort","withStyles","props","classes","category","sortBy","setSortBy","list","Grid","container","className","item","lg","md","sm","xs","Typography","variant","color","doneLength","filter","done","length","getTaskProgress","Select","value","onChange","e","target","MenuItem","map","index","name","key","ListView","backgroundColor","minHeight","marginBottom","borderTopLeftRadius","borderTopRightRadius","setList","setCategory","filterTodos","allTodoItems","selectedCategory","List","id","Box","textAlign","mt","NoListFound","formState","task","error","TaskForm","position","bottom","boxShadow","txtField","btn","borderRadius","minWidth","icon","fontSize","useState","form","setForm","formattedCategory","trim","charAt","toUpperCase","slice","identicalCategory","ct","tagColor","Math","random","isTaskValid","isCategoryValid","handleForm","Button","aria-label","onClick","Date","toString","hsl","createdDate","categoryWithHsl","updateCategory","TextField","placeholder","required","helperText","inputProps","maxLength","borderBottom","checkboxGrid","tag","textDecoration","date","modalState","setModalState","Checkbox","findIndex","sample","updatedList","checked","display","ml","CategoryTag","moment","format","DeleteModal","open","setOpen","handleDelete","i","c","theme","actionBtn","palette","main","Dialog","onClose","aria-labelledby","aria-describedby","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","autoFocus","style","TaskView","App","path","exact","Boolean","window","location","hostname","match","createMuiTheme","primary","secondary","text","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.b1e78159.chunk.js","sourcesContent":["import React, { SetStateAction, Dispatch, ChangeEvent } from 'react'\nimport { Grid, Typography, Select, MenuItem } from '@material-ui/core'\nimport { WithStyles, withStyles } from '@material-ui/core';\nimport { IList, ICategory } from '../../models';\nimport bgImage from '../../assets/images/bg.png'\n\nconst styles = {\n    root: {\n        padding: '3% 11.5%',\n        backgroundImage: `url(${bgImage})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'top'\n    },\n    select: {\n        width: '80%'\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    category: ICategory[]\n    sortBy: string\n    setSortBy: Dispatch<SetStateAction<string>>\n    list: IList[]\n}\n\nconst HeaderSortBase = (props: IProps) => {\n    const { classes, category, sortBy, setSortBy, list } = props\n\n    const getTaskProgress = (): string => {\n        const doneLength = list.filter((item: IList) => item.done).length\n        return `${doneLength} of ${list.length} tasks`\n    }\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid item lg={8} md={8} sm={12} xs={12}>\n                <Typography variant='h4' color='textPrimary'>My Tasks</Typography>\n                <Typography variant='body1' color='textSecondary'>{getTaskProgress()}</Typography>\n            </Grid>\n            <Grid item lg={4} md={4} sm={12} xs={12}>\n                <Select\n                    className={classes.select}\n                    value={sortBy}\n                    onChange={(e: ChangeEvent<{ value: unknown }>) => setSortBy(e.target.value as string)}\n                >\n                    <MenuItem value='all'>All</MenuItem>\n                    {\n                        category.length > 0 &&\n                        category.map((item: ICategory, index: number) => {\n                            return <MenuItem value={item.name} key={index}>{item.name}</MenuItem>\n                        })\n                    }\n                </Select>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport const HeaderSort = withStyles(styles)(HeaderSortBase)","import React, { Dispatch, SetStateAction } from 'react'\nimport { WithStyles, withStyles, Box } from '@material-ui/core'\nimport { IList, ICategory } from '../../models'\nimport { List, NoListFound } from '../'\n\nconst styles = {\n    root: {\n        backgroundColor: '#FAFAFA',\n        padding: 20,\n        minHeight: '100vh',\n        marginBottom: '95px',\n        borderTopLeftRadius: 90,\n        borderTopRightRadius: 90\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    list: IList[]\n    sortBy: string\n    setList: Dispatch<SetStateAction<IList[]>>\n    setCategory: Dispatch<SetStateAction<ICategory[]>>\n    category: ICategory[]\n    setSortBy: Dispatch<SetStateAction<string>>\n}\n\nconst ListViewBase = (props: IProps) => {\n    const { classes, list, sortBy, setList, setCategory, category, setSortBy } = props\n\n    const filterTodos = (allTodoItems: IList[], selectedCategory: string): IList[] => {\n        if (allTodoItems.length > 0) {\n            if (selectedCategory === 'all') {\n                return allTodoItems\n            }\n            return allTodoItems.filter((item: IList) => {\n                return item.category.name === selectedCategory\n            })\n        }\n        return []\n    }\n\n    return (\n        <div className={classes.root}>\n            {\n                filterTodos(list, sortBy).length > 0 ?\n                    filterTodos(list, sortBy).map((item: IList) => {\n                        return (\n                            <List\n                                item={item}\n                                setList={setList}\n                                list={list}\n                                key={item.id}\n                                setCategory={setCategory}\n                                category={category}\n                                setSortBy={setSortBy}\n                            />\n                        )\n                    })\n                    :\n                    <Box textAlign='center' mt={20}>\n                        <NoListFound />\n                    </Box>\n            }\n        </div>\n    );\n}\n\nexport const ListView = withStyles(styles)(ListViewBase)","import React, { Dispatch, SetStateAction, useState, ChangeEvent } from 'react'\nimport { Grid, TextField, WithStyles, withStyles, Button } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport { IList, ICategory } from '../../models'\nimport { getPastelColor } from '../../utils/helper'\n\nconst styles = {\n    root: {\n        position: 'fixed' as 'fixed',\n        bottom: 0,\n        padding: '2% 4%',\n        boxShadow: '0 1px 6px 0 rgba(32, 33, 36, 0.28)',\n        backgroundColor: '#ffffff'\n    },\n    txtField: {\n        width: '90%'\n    },\n    btn: {\n        width: '42px',\n        borderRadius: '20px',\n        minWidth: 0\n    },\n    icon: {\n        fontSize: 30,\n        color: '#757575'\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    list: IList[]\n    setList: Dispatch<SetStateAction<any>>\n    category: ICategory[]\n    setCategory: Dispatch<SetStateAction<ICategory[]>>\n}\n\ninterface IFormState {\n    task: string\n    category: string\n    error: boolean\n}\n\nconst formState: IFormState = {\n    task: '',\n    category: '',\n    error: false\n}\n\nconst TaskFormBase = (props: IProps) => {\n    const [form, setForm] = useState(formState)\n    const { classes, list, setList, category, setCategory } = props\n\n    const formattedCategory: string = form.category.trim().charAt(0).toUpperCase() + form.category.trim().slice(1)\n    const identicalCategory: ICategory[] = category.filter((ct: ICategory) => ct.name === formattedCategory)\n    const tagColor: string = getPastelColor()\n\n    let isTaskValid: boolean = form.task.trim().length !== 0\n    let isCategoryValid: boolean = form.category.trim().length !== 0\n\n    const handleForm = (e: ChangeEvent<HTMLInputElement>): void => {\n        setForm({ ...form, [e.target.name]: e.target.value })\n    }\n\n    const updateCategory = (): void => {\n        if (identicalCategory.length === 0) {\n            const categoryWithHsl: ICategory = {\n                name: formattedCategory,\n                hsl: tagColor\n            }\n            setCategory([...category, categoryWithHsl])\n        }\n    }\n\n    const getUpdatedTask = (): IList => {\n        return {\n            id: new Date().toString(),\n            task: form.task,\n            category: {\n                name: formattedCategory,\n                hsl: identicalCategory.length > 0 ? identicalCategory[0].hsl : tagColor\n            },\n            done: false,\n            createdDate: new Date()\n        }\n    }\n\n    const submitForm = (): void => {\n        if (isTaskValid && isCategoryValid) {\n            // update list and category state\n            setList([...list, getUpdatedTask()])\n            updateCategory()\n\n            // clear form state\n            setForm(formState)\n        } else {\n            setForm({ ...form, error: true })\n        }\n    }\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid item lg={2} md={2} sm={2} xs={1}>\n                <Button\n                    aria-label=\"Add Task\"\n                    variant='outlined'\n                    className={classes.btn}\n                    onClick={submitForm}\n                >\n                    <AddIcon className={classes.icon} />\n                </Button>\n            </Grid>\n            <Grid item lg={7} md={7} sm={7} xs={8}>\n                <TextField\n                    className={classes.txtField}\n                    placeholder='Task (max 50)'\n                    value={form.task}\n                    onChange={handleForm}\n                    name='task'\n                    required={true}\n                    error={form.error && !isTaskValid}\n                    helperText={(form.error && !isTaskValid) && 'Pleae fill this field'}\n                    inputProps={{ maxLength: 50 }}\n                />\n            </Grid>\n            <Grid item lg={3} md={3} sm={3} xs={3}>\n                <TextField\n                    className={classes.txtField}\n                    placeholder='Category (max 20)'\n                    value={form.category}\n                    onChange={handleForm}\n                    name='category'\n                    required={true}\n                    error={form.error && !isCategoryValid}\n                    helperText={(form.error && !isCategoryValid) && 'Pleae fill this field'}\n                    inputProps={{ maxLength: 20 }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport const TaskForm = withStyles(styles)(TaskFormBase)","/**\n * return randonly generatated\n * pastel color hsl\n */\nexport const getPastelColor = () => {\n    return \"hsl(\" + 360 * Math.random() + ',' +\n        (25 + 70 * Math.random()) + '%,' +\n        (85 + 10 * Math.random()) + '%)'\n}","import React, { Dispatch, SetStateAction, ChangeEvent, useState } from 'react'\nimport { Grid, Checkbox, Typography, WithStyles, withStyles, Button, Box } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { IList, ICategory } from '../../models'\nimport { DeleteModal, CategoryTag } from '../'\nimport { formatDate } from '../../utils/format'\n\nconst styles = {\n    root: {\n        borderBottom: '1px solid #E5E5E5',\n        padding: 20\n    },\n    checkboxGrid: {\n        textAlign: 'center' as 'center'\n    },\n    icon: {\n        color: '#757575'\n    },\n    tag: {\n        backgroundColor: '#FFDEDE',\n        padding: '3px 10px',\n        borderRadius: 10\n    },\n    done: {\n        textDecoration: 'line-through'\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    item: IList\n    setList: Dispatch<SetStateAction<IList[]>>\n    list: IList[]\n    setCategory: Dispatch<SetStateAction<ICategory[]>>\n    category: ICategory[]\n    setSortBy: Dispatch<SetStateAction<string>>\n}\n\nconst ListBase = (props: IProps) => {\n    const { classes, item, setList, list, setCategory, setSortBy } = props\n\n    const { task, category, createdDate, done } = item\n    const [modalState, setModalState] = useState<boolean>(false)\n\n    const handleCheckbox = (e: ChangeEvent<HTMLInputElement>): void => {\n        const index: number = list.findIndex(sample => sample.id === item.id)\n        const updatedList: IList = {\n            ...item,\n            done: e.target.checked\n        }\n        setList([\n            ...list.slice(0, index),\n            updatedList,\n            ...list.slice(index + 1)\n        ])\n    }\n\n    const handleDelete = (): void => {\n        if (list.filter((i: IList) => i.category === item.category).length === 1) {\n            setCategory(props.category.filter((c: ICategory) => c.name !== item.category.name))\n            setSortBy('all')\n        }\n        setList(list.filter((i: IList) => i.id !== item.id))\n    }\n\n    return (\n        <>\n            <Grid container className={classes.root}>\n                <Grid item lg={1} md={1} sm={1} className={classes.checkboxGrid}>\n                    <Checkbox\n                        onChange={handleCheckbox}\n                        checked={item.done}\n                    />\n                </Grid>\n                <Grid item lg={7} md={9} sm={9}>\n                    <Box display='inline-block'>\n                        <Typography variant='body1' color='textPrimary' className={done ? classes.done : ''}>\n                            {task}\n                        </Typography>\n                    </Box>\n                    <Box display='inline-block' ml={5}>\n                        <CategoryTag done={done} category={category} />\n                    </Box>\n                    <Box display='block'>\n                        <Typography variant='caption' color='textSecondary'>\n                            {formatDate(createdDate)}\n                        </Typography>\n                    </Box>\n                </Grid>\n                <Grid item lg={1} md={1} sm={1}>\n                    <Button onClick={() => setModalState(true)}>\n                        <DeleteIcon className={classes.icon} />\n                    </Button>\n                </Grid>\n            </Grid>\n            <DeleteModal open={modalState} setOpen={setModalState} handleDelete={handleDelete} />\n        </>\n    );\n}\n\nexport const List = withStyles(styles)(ListBase)","import moment from 'moment'\n\n/**\n * Format date\n * ex) Sep 20, 2020\n * @param date date to format\n */\nexport const formatDate = (date: Date) => {\n    return moment(date).format('MMM Do, YYYY')\n}","import React, { Dispatch, SetStateAction } from 'react'\nimport { Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, WithStyles, withStyles, Theme } from '@material-ui/core'\n\nconst styles = (theme: Theme) => ({\n    actionBtn: {\n        color: theme.palette.error.main\n    }\n})\n\ninterface IProps extends WithStyles<typeof styles> {\n    open: boolean\n    setOpen: Dispatch<SetStateAction<boolean>>\n    handleDelete: () => void\n}\n\nconst DeleteModalBase = (props: IProps) => {\n    const { open, setOpen, handleDelete, classes } = props\n\n    return (\n        <Dialog\n            open={open}\n            onClose={() => setOpen(false)}\n            aria-labelledby=\"delete-task-dialog-title\"\n            aria-describedby=\"delete-task-dialog-desc\"\n            fullWidth={true}\n            maxWidth='sm'\n        >\n            <DialogTitle id=\"delete-task-dialog-title\">Delete a Task</DialogTitle>\n            <DialogContent>\n                <Typography color='textPrimary'>You have selected to delete this task.</Typography>\n                <Typography color='textPrimary'>Are you sure you want to delete this item?</Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => setOpen(false)}>\n                    Cancel\n                </Button>\n                <Button onClick={handleDelete} autoFocus className={classes.actionBtn}>\n                    Yes, Delete it\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nexport const DeleteModal = withStyles(styles)(DeleteModalBase)","import React from 'react'\nimport { Typography, WithStyles, withStyles } from '@material-ui/core'\nimport { ICategory } from '../../models'\n\nconst styles = {\n    done: {\n        textDecoration: 'line-through'\n    },\n    tag: {\n        padding: '3px 10px',\n        borderRadius: 10\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    category: ICategory\n    done: boolean\n}\n\nconst CategoryTagBase = (props: IProps) => {\n    const { classes, category, done } = props\n    return (\n        <div className={classes.tag} style={{ backgroundColor: `${category.hsl}` }}>\n            <Typography\n                variant='body2'\n                color='textPrimary'\n                className={done ? classes.done : ''}\n            >\n                {category.name}\n            </Typography>\n        </div>\n    );\n}\n\nexport const CategoryTag = withStyles(styles)(CategoryTagBase)","import React from 'react'\nimport { WithStyles, withStyles, Typography } from '@material-ui/core'\nimport EventSeatIcon from '@material-ui/icons/EventSeat'\n\nconst styles = {\n    icon: {\n        color: '#bdbdbd',\n        fontSize: 90\n    }\n}\n\nconst NoListFoundBase = (props: WithStyles<typeof styles>) => {\n    const { classes } = props\n\n    return (\n        <>\n            <EventSeatIcon className={classes.icon} />\n            <Typography variant='body1' color='textSecondary'>\n                No tasks found\n            </Typography>\n            <Typography variant='body1' color='textSecondary'>\n                Sit back and relax!\n            </Typography>\n        </>\n    );\n}\n\nexport const NoListFound = withStyles(styles)(NoListFoundBase)","import React, { useState } from 'react'\nimport { HeaderSort, ListView, TaskForm } from '../../components'\nimport { IList, ICategory } from '../../models'\n\nexport const TaskView = () => {\n    const [list, setList] = useState<IList[]>([])\n    const [category, setCategory] = useState<ICategory[]>([])\n    const [sortBy, setSortBy] = useState('all')\n\n    return (\n        <>\n            <HeaderSort\n                category={category}\n                sortBy={sortBy}\n                setSortBy={setSortBy}\n                list={list}\n            />\n            <ListView\n                list={list}\n                sortBy={sortBy}\n                setList={setList}\n                setCategory={setCategory}\n                category={category}\n                setSortBy={setSortBy}\n            />\n            <TaskForm\n                list={list}\n                setList={setList}\n                category={category}\n                setCategory={setCategory}\n            />\n        </>\n    );\n}","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { TaskView } from './container'\nimport { DEFAULT_URL } from './assets/constants/'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path={DEFAULT_URL} exact><TaskView /></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// URL\nexport const DEFAULT_URL = '/'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core\"\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#7FF0B0'\n        },\n        secondary: {\n            main: '#FFEC87'\n        },\n        text: {\n            primary: '#373737',\n            secondary: '#757575'\n        },\n        error: {\n            main: '#d83b30'\n        }\n    }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from './utils/theme';\nimport { ThemeProvider } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.e0b71a0e.png\";"],"sourceRoot":""}