{"version":3,"sources":["assets/constants/constants.ts","components/HeaderFilter/HeaderFilter.tsx","components/HeaderFilter/PriorityChip.tsx","components/HeaderFilter/Header.tsx","components/ListView/ListView.tsx","components/TaskForm/TaskForm.tsx","utils/helper.ts","components/DeleteModal/DeleteModal.tsx","components/CategoryTag/CategoryTag.tsx","components/NoListFound/NoListFound.tsx","components/TaskItem/TaskItem.tsx","utils/format.ts","App.tsx","utils/store.ts","serviceWorker.ts","utils/theme.ts","index.tsx"],"names":["PRIORITY_LIST","id","name","HeaderFilter","withStyles","root","padding","searchField","width","classes","useContext","TaskSaverContext","setSortBy","sortBy","searchQuery","Grid","container","className","data-testid","alignItems","item","lg","md","sm","xs","TextField","value","onChange","e","formattedValue","target","trim","inputProps","maxLength","placeholder","InputProps","startAdornment","InputAdornment","position","Typography","variant","color","map","priorityItem","PriorityChip","key","chip","marginRight","marginTop","backgroundColor","activeColor","priorityFilter","checkNewPriority","selectedPriority","filter","priority","length","Chip","label","clickable","onClick","Header","tasks","doneLength","done","getTaskProgress","ListView","minHeight","marginBottom","borderTopLeftRadius","borderTopRightRadius","getFilteredByQuery","task","desc","includes","filterTodos","filteredByPriority","TaskItem","Box","textAlign","mt","NoListFound","formState","category","error","TaskForm","bottom","boxShadow","txtField","btn","borderRadius","minWidth","icon","fontSize","text","setTask","categories","setCategory","useState","form","setForm","formattedCategory","charAt","toUpperCase","slice","identicalCategory","tagColor","Math","random","isTaskValid","isCategoryValid","handleForm","getUpdatedTask","newCategoryId","categoryId","Date","toString","createdDate","multiline","rowsMax","required","helperText","Select","style","list","MenuItem","Button","aria-label","uuid","categoryWithHsl","hsl","updateCategory","DeleteModal","theme","actionBtn","palette","main","open","setOpen","handleDelete","Dialog","onClose","aria-labelledby","aria-describedby","fullWidth","maxWidth","DialogTitle","DialogContent","DialogActions","autoFocus","CategoryTag","textDecoration","tag","borderBottom","checkboxGrid","date","currentCategory","modalState","setModalState","Checkbox","index","findIndex","updatedTask","checked","ml","moment","format","createContext","App","Provider","Boolean","window","location","hostname","match","createMuiTheme","primary","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7edda182.chunk.js","sourcesContent":["// URL\nexport const DEFAULT_URL = '/'\n\n// General\nexport const PRIORITY_HIGH = 'high'\nexport const PRIORITY_MEDIUM = 'medium'\nexport const PRIORITY_LOW = 'low'\n\nexport const PRIORITY_LIST = [\n    { id: 0, name: PRIORITY_HIGH },\n    { id: 1, name: PRIORITY_MEDIUM },\n    { id: 2, name: PRIORITY_LOW }\n]","import React, { ChangeEvent, useContext, ReactElement } from 'react'\nimport { Grid, InputAdornment, TextField, Typography, WithStyles, withStyles } from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\nimport { IPriorityListItem, ITaskSaverData } from '../../models'\nimport { TaskSaverContext } from '../../App'\nimport { PRIORITY_LIST } from '../../assets/constants'\nimport { Header, PriorityChip } from './'\n\nconst styles = {\n    root: {\n        padding: '3% 11.5%'\n    },\n    searchField: {\n        width: '80%'\n    }\n}\n\nconst HeaderFilterBase = ({ classes }: WithStyles<typeof styles>): ReactElement => {\n    const { setSortBy, sortBy }: ITaskSaverData = useContext(TaskSaverContext)\n    const { searchQuery } = sortBy\n\n    const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const formattedValue: string = e.target.value.trim()\n        setSortBy({ ...sortBy, 'searchQuery': formattedValue })\n    }\n\n    return (\n        <Grid container className={classes.root} data-testid='header-filter' alignItems='flex-end'>\n            <Grid item lg={5} md={5} sm={12} xs={12}>\n                <Header />\n            </Grid>\n            <Grid item lg={4} md={4} sm={12} xs={12}>\n                <TextField\n                    className={classes.searchField}\n                    value={searchQuery}\n                    onChange={handleOnChange}\n                    inputProps={{ maxLength: 50 }}\n                    placeholder='Search by task contents'\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position='start'>\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n            <Grid item lg={3} md={3} sm={12} xs={12}>\n                <Typography variant='body1' color='textPrimary'>Sort by priority:</Typography>\n                {\n                    PRIORITY_LIST.map((priorityItem: IPriorityListItem) => {\n                        return (\n                            <PriorityChip priorityItem={priorityItem} key={priorityItem.id} />\n                        )\n                    })\n                }\n            </Grid>\n        </Grid>\n    );\n}\n\nexport const HeaderFilter = withStyles(styles)(HeaderFilterBase)","import React, { useContext, ReactElement } from 'react'\nimport { Chip, WithStyles, withStyles } from '@material-ui/core'\nimport { IPriorityListItem, ITaskSaverData } from '../../models'\nimport { TaskSaverContext } from '../../App'\n\nconst styles = {\n    chip: {\n        marginRight: 10,\n        marginTop: 5,\n        color: '#333333',\n        backgroundColor: '#d5ffbb !important',\n        '&:hover': {\n            backgroundColor: '#9fc388'\n        }\n    },\n    activeColor: {\n        backgroundColor: '#9fc388 !important'\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    priorityItem: IPriorityListItem\n}\n\nconst PriorityChipBase = ({ classes, priorityItem }: IProps): ReactElement => {\n    const { setSortBy, sortBy }: ITaskSaverData = useContext(TaskSaverContext)\n    const { priorityFilter } = sortBy\n\n    const checkNewPriority = (selectedPriority: string): boolean =>\n        priorityFilter.filter((priority: string) => priority === selectedPriority).length > 0\n\n    const handleOnClick = (selectedPriority: string): void => {\n        if (checkNewPriority(selectedPriority)) {\n            setSortBy({ ...sortBy, priorityFilter: [...priorityFilter.filter((item: string) => item !== selectedPriority)] })\n        } else {\n            setSortBy({ ...sortBy, priorityFilter: [...priorityFilter, selectedPriority] })\n        }\n    }\n\n    return (\n        <Chip\n            data-testid='priority-chip'\n            className={`${classes.chip} ${checkNewPriority(priorityItem.name) ? classes.activeColor : ''}`}\n            key={priorityItem.id}\n            label={priorityItem.name}\n            clickable\n            onClick={() => handleOnClick(priorityItem.name)}\n        />\n    );\n}\n\nexport const PriorityChip = withStyles(styles)(PriorityChipBase)","import React, { useContext, ReactElement } from 'react'\nimport { Typography } from '@material-ui/core'\nimport { ITask, ITaskSaverData } from '../../models'\nimport { TaskSaverContext } from '../../App'\n\nexport const Header = (): ReactElement => {\n    const taskSaverData: ITaskSaverData = useContext(TaskSaverContext)\n    const { tasks } = taskSaverData\n\n    const getTaskProgress = (): string => {\n        const doneLength: number = tasks.filter((item: ITask) => item.done).length\n        return `${doneLength} of ${tasks.length} tasks`\n    }\n\n    return (\n        <div data-testid='header'>\n            <Typography variant='h4' color='textPrimary'>Task Saver</Typography>\n            <Typography variant='body1' color='textSecondary'>{getTaskProgress()}</Typography>\n        </div>\n    );\n}\n","import React, { useContext, ReactElement } from 'react'\nimport { WithStyles, withStyles, Box } from '@material-ui/core'\nimport { ITask, ITaskSaverData } from '../../models'\nimport { NoListFound, TaskItem } from '../'\nimport { TaskSaverContext } from '../../App'\n\nconst styles = {\n    root: {\n        backgroundColor: '#f5f5f5',\n        padding: 20,\n        minHeight: '100vh',\n        marginBottom: '95px',\n        borderTopLeftRadius: 90,\n        borderTopRightRadius: 90\n    }\n}\n\nconst ListViewBase = ({ classes }: WithStyles<typeof styles>): ReactElement => {\n    const { tasks, sortBy }: ITaskSaverData = useContext(TaskSaverContext)\n    const { searchQuery, priorityFilter } = sortBy\n\n    const getFilteredByQuery = (tasks: ITask[]): ITask[] => {\n        return tasks.filter((task: ITask) => task.desc.includes(searchQuery))\n    }\n\n    const filterTodos = (): ITask[] => {\n        if (tasks.length > 0) {\n            if (priorityFilter.length > 0) {\n                const filteredByPriority: ITask[] = tasks.filter((task: ITask) => priorityFilter.includes(task.priority))\n                return getFilteredByQuery(filteredByPriority)\n            }\n\n            return getFilteredByQuery(tasks)\n        }\n        return []\n    }\n\n    return (\n        <div className={classes.root} data-testid='list-view'>\n            {\n                filterTodos().length > 0 ?\n                    filterTodos().map((item: ITask) => {\n                        return (\n                            <TaskItem item={item} key={item.id} />\n                        )\n                    })\n                    :\n                    <Box textAlign='center' mt={20}>\n                        <NoListFound />\n                    </Box>\n            }\n        </div>\n    );\n}\n\nexport const ListView = withStyles(styles)(ListViewBase)","import React, { useState, ChangeEvent, useContext, ReactElement } from 'react'\nimport * as uuid from 'uuid'\nimport { Grid, TextField, WithStyles, withStyles, Button, Select, MenuItem } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\nimport { ITask, ICategory, ITaskSaverData, IPriorityListItem, IFormState } from '../../models'\nimport { getCapitalizedString, getPastelColor } from '../../utils/helper'\nimport { PRIORITY_HIGH, PRIORITY_LIST } from '../../assets/constants'\nimport { TaskSaverContext } from '../../App'\n\nconst styles = {\n    root: {\n        position: 'fixed' as 'fixed',\n        bottom: 0,\n        padding: '2% 4%',\n        boxShadow: '0 1px 6px 0 rgba(32, 33, 36, 0.28)',\n        backgroundColor: '#ffffff'\n    },\n    txtField: {\n        width: '90%'\n    },\n    btn: {\n        width: '42px',\n        borderRadius: '20px',\n        minWidth: 0\n    },\n    icon: {\n        fontSize: 30,\n        color: '#757575'\n    }\n}\n\nconst formState: IFormState = {\n    task: '',\n    category: '',\n    priority: PRIORITY_HIGH,\n    error: false\n}\n\nconst TaskFormBase = ({ classes }: WithStyles<typeof styles>): ReactElement => {\n    const {\n        tasks,\n        setTask,\n        categories,\n        setCategory\n    }: ITaskSaverData = useContext(TaskSaverContext)\n\n    const [form, setForm] = useState(formState)\n\n    const formattedCategory: string = getCapitalizedString(form.category)\n    const identicalCategory: ICategory[] = categories.filter((category: ICategory) => category.name === formattedCategory)\n    const tagColor: string = getPastelColor()\n\n    let isTaskValid: boolean = form.task.trim().length !== 0\n    let isCategoryValid: boolean = form.category.trim().length !== 0\n\n    const handleForm = (e: ChangeEvent<HTMLInputElement>): void => {\n        setForm({ ...form, [e.target.name]: e.target.value })\n    }\n\n    const updateCategory = (categoryId: string): void => {\n        if (identicalCategory.length === 0) {\n            const categoryWithHsl: ICategory = {\n                id: categoryId,\n                name: formattedCategory,\n                hsl: tagColor\n            }\n            setCategory([...categories, categoryWithHsl])\n        }\n    }\n\n    const getUpdatedTask = (newCategoryId: string): ITask => {\n        const categoryId: string = identicalCategory.length === 0 ? newCategoryId : identicalCategory[0].id\n        return {\n            id: new Date().toString(),\n            desc: form.task,\n            categoryId: categoryId,\n            done: false,\n            priority: form.priority,\n            createdDate: new Date()\n        }\n    }\n\n    const submitForm = (): void => {\n        const newCategoryId: string = uuid.v4()\n        if (isTaskValid && isCategoryValid) {\n            // update list and category state\n            setTask([...tasks, getUpdatedTask(newCategoryId)])\n            updateCategory(newCategoryId)\n\n            // clear form state\n            setForm(formState)\n        } else {\n            setForm({ ...form, error: true })\n        }\n    }\n\n    const selectHandleForm = (e: ChangeEvent<{ value: unknown }>) => {\n        setForm({ ...form, priority: e.target.value as string })\n    }\n\n    return (\n        <Grid container className={classes.root} data-testid='task-form'>\n            <Grid item lg={5} md={5} sm={5} xs={5}>\n                <TextField\n                    className={classes.txtField}\n                    placeholder='Task (max 100)'\n                    value={form.task}\n                    onChange={handleForm}\n                    multiline\n                    rowsMax={3}\n                    name='task'\n                    required={true}\n                    error={form.error && !isTaskValid}\n                    helperText={(form.error && !isTaskValid) && 'Pleae fill this field'}\n                    inputProps={{ maxLength: 100 }}\n                />\n            </Grid>\n            <Grid item lg={3} md={3} sm={3} xs={3}>\n                <TextField\n                    className={classes.txtField}\n                    placeholder='Category (max 20)'\n                    value={form.category}\n                    onChange={handleForm}\n                    name='category'\n                    required={true}\n                    error={form.error && !isCategoryValid}\n                    helperText={(form.error && !isCategoryValid) && 'Pleae fill this field'}\n                    inputProps={{ maxLength: 20 }}\n                />\n            </Grid>\n            <Grid item lg={2} md={2} sm={2} xs={2}>\n                <Select value={form.priority} style={{ width: '100%' }} name='priority' onChange={selectHandleForm}>\n                    {\n                        PRIORITY_LIST.map((list: IPriorityListItem) => {\n                            return (\n                                <MenuItem key={list.id} value={list.name}>{list.name}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n            </Grid>\n            <Grid item lg={2} md={2} sm={2} xs={2} style={{ textAlign: 'right' }}>\n                <Button\n                    aria-label=\"Add Task\"\n                    variant='outlined'\n                    className={classes.btn}\n                    onClick={submitForm}\n                >\n                    <AddIcon className={classes.icon} />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport const TaskForm = withStyles(styles)(TaskFormBase)","/**\n * return randonly generatated\n * pastel color hsl\n */\nexport const getPastelColor = (): string => {\n    return \"hsl(\" + 360 * Math.random() + ',' +\n        (25 + 70 * Math.random()) + '%,' +\n        (85 + 10 * Math.random()) + '%)'\n}\n\n/**\n * return capitalized string\n * @param text Text to be capitalized\n */\nexport const getCapitalizedString = (text: string): string => {\n    return text.trim().charAt(0).toUpperCase() + text.trim().slice(1)\n}\n","import React, { Dispatch, SetStateAction, ReactElement } from 'react'\nimport { Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, WithStyles, withStyles, Theme } from '@material-ui/core'\n\nconst styles = (theme: Theme) => ({\n    actionBtn: {\n        color: theme.palette.error.main\n    }\n})\n\ninterface IProps extends WithStyles<typeof styles> {\n    open: boolean\n    setOpen: Dispatch<SetStateAction<boolean>>\n    handleDelete: () => void\n}\n\nconst DeleteModalBase = ({ open, setOpen, handleDelete, classes }: IProps): ReactElement => {\n\n    return (\n        <div data-testid='delete-modal'>\n            <Dialog\n                open={open}\n                onClose={() => setOpen(false)}\n                aria-labelledby=\"delete-task-dialog-title\"\n                aria-describedby=\"delete-task-dialog-desc\"\n                fullWidth={true}\n                maxWidth='sm'\n            >\n                <DialogTitle id=\"delete-task-dialog-title\">Delete a Task</DialogTitle>\n                <DialogContent>\n                    <Typography color='textPrimary'>You have selected to delete this task.</Typography>\n                    <Typography color='textPrimary'>Are you sure you want to delete this item?</Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setOpen(false)}>\n                        Cancel\n                </Button>\n                    <Button onClick={handleDelete} autoFocus className={classes.actionBtn}>\n                        Yes, Delete it\n                </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport const DeleteModal = withStyles(styles)(DeleteModalBase)","import React, { ReactElement } from 'react'\nimport { Typography, WithStyles, withStyles } from '@material-ui/core'\nimport { ICategory } from '../../models'\n\nconst styles = {\n    done: {\n        textDecoration: 'line-through'\n    },\n    tag: {\n        padding: '3px 10px',\n        borderRadius: 10\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    category: ICategory\n    done: boolean\n}\n\nconst CategoryTagBase = ({ classes, category, done }: IProps): ReactElement => {\n    return (\n        <div data-testid='category-tag' className={classes.tag} style={{ backgroundColor: `${category.hsl}` }}>\n            <Typography\n                variant='body2'\n                color='textPrimary'\n                className={done ? classes.done : ''}\n            >\n                {category.name}\n            </Typography>\n        </div>\n    );\n}\n\nexport const CategoryTag = withStyles(styles)(CategoryTagBase)","import React, { ReactElement } from 'react'\nimport { WithStyles, withStyles, Typography } from '@material-ui/core'\nimport EventSeatIcon from '@material-ui/icons/EventSeat'\n\nconst styles = {\n    icon: {\n        color: '#bdbdbd',\n        fontSize: 60\n    }\n}\n\nconst NoListFoundBase = ({ classes }: WithStyles<typeof styles>): ReactElement => {\n\n    return (\n        <div data-testid='no-list-found'>\n            <EventSeatIcon className={classes.icon} />\n            <Typography variant='body1' color='textSecondary'>\n                No tasks found\n            </Typography>\n            <Typography variant='body1' color='textSecondary'>\n                Sit back and relax!\n            </Typography>\n        </div>\n    );\n}\n\nexport const NoListFound = withStyles(styles)(NoListFoundBase)","import React, { ChangeEvent, useContext, useState, ReactElement } from 'react'\nimport { Grid, Checkbox, Typography, WithStyles, withStyles, Button, Box } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { ITask, ICategory, ITaskSaverData } from '../../models'\nimport { DeleteModal, CategoryTag } from '..'\nimport { formatDate } from '../../utils/format'\nimport { TaskSaverContext } from '../../App'\n\nconst styles = {\n    root: {\n        borderBottom: '1px solid #E5E5E5',\n        padding: 20\n    },\n    checkboxGrid: {\n        textAlign: 'center' as 'center'\n    },\n    icon: {\n        color: '#757575'\n    },\n    tag: {\n        backgroundColor: '#FFDEDE',\n        padding: '3px 10px',\n        borderRadius: 10\n    },\n    done: {\n        textDecoration: 'line-through'\n    }\n}\n\ninterface IProps extends WithStyles<typeof styles> {\n    item: ITask\n}\n\nconst TaskItemBase = ({ classes, item }: IProps): ReactElement => {\n    const { tasks, setTask, categories, setCategory, setSortBy, sortBy }: ITaskSaverData = useContext(TaskSaverContext)\n    const { desc, categoryId, createdDate, done, id } = item\n    const currentCategory: ICategory = categories.filter((category: ICategory) => category.id === categoryId)[0]\n    const [modalState, setModalState] = useState<boolean>(false)\n\n    const handleCheckbox = (e: ChangeEvent<HTMLInputElement>): void => {\n        const index: number = tasks.findIndex((task: ITask) => task.id === id)\n        const updatedTask: ITask = {\n            ...item,\n            done: e.target.checked\n        }\n        setTask([\n            ...tasks.slice(0, index),\n            updatedTask,\n            ...tasks.slice(index + 1)\n        ])\n    }\n\n    const handleDelete = (): void => {\n        if (tasks.filter((task: ITask) => task.categoryId === item.categoryId).length === 1) {\n            setCategory(categories.filter((category: ICategory) => category.id !== categoryId))\n            setSortBy({ ...sortBy, searchQuery: '' })\n        }\n        setTask(tasks.filter((task: ITask) => task.id !== id))\n    }\n\n    return (\n        <div data-testid='task-item'>\n            <Grid container className={classes.root}>\n                <Grid item lg={1} md={1} sm={1} className={classes.checkboxGrid}>\n                    <Checkbox\n                        onChange={handleCheckbox}\n                        checked={item.done}\n                        data-testid='task-checkbox'\n                    />\n                </Grid>\n                <Grid item lg={10} md={10} sm={10}>\n                    <Grid container>\n                        <Grid item>\n                            <Typography variant='body1' color='textPrimary' className={done ? classes.done : ''}>\n                                {desc}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Box ml={5}>\n                                <CategoryTag done={done} category={currentCategory} />\n                            </Box>\n                        </Grid>\n                    </Grid>\n                    <Typography variant='caption' color='textSecondary'>\n                        {formatDate(createdDate)}\n                    </Typography>\n                </Grid>\n                <Grid item lg={1} md={1} sm={1}>\n                    <Button onClick={() => setModalState(true)}>\n                        <DeleteIcon className={classes.icon} />\n                    </Button>\n                </Grid>\n            </Grid>\n            <DeleteModal open={modalState} setOpen={setModalState} handleDelete={handleDelete} />\n        </div>\n    );\n}\n\nexport const TaskItem = withStyles(styles)(TaskItemBase)","import moment from 'moment'\n\n/**\n * Format date\n * ex) Sep 20, 2020\n * @param date date to format\n */\nexport const formatDate = (date: Date) => {\n    return moment(date).format('MMM Do, YYYY')\n}","import React, { createContext, useState, ReactElement } from 'react'\nimport { HeaderFilter, ListView, TaskForm } from './components'\nimport { ITask, ICategory, ITaskSaverData, ISortByState } from './models'\nimport { taskSaverData } from './utils/store'\n\nexport const TaskSaverContext: React.Context<ITaskSaverData> = createContext<ITaskSaverData>(taskSaverData)\n\nconst App = (): ReactElement => {\n  const [tasks, setTask] = useState<ITask[]>([])\n  const [categories, setCategory] = useState<ICategory[]>([])\n  const [sortBy, setSortBy] = useState<ISortByState>({ searchQuery: '', priorityFilter: [] })\n\n  return (\n    <TaskSaverContext.Provider value={{\n      tasks,\n      setTask,\n      categories,\n      setCategory,\n      sortBy,\n      setSortBy\n    }}>\n      <HeaderFilter />\n      <ListView />\n      <TaskForm />\n    </TaskSaverContext.Provider>\n  );\n}\n\nexport default App\n","import { ISortByState, ITaskSaverData } from \"../models\"\n\nexport const taskSaverData: ITaskSaverData = {\n    tasks: [],\n    setTask: () => { },\n    categories: [],\n    sortBy: {} as ISortByState,\n    setCategory: () => { },\n    setSortBy: () => { }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core\"\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#7FF0B0'\n        },\n        secondary: {\n            main: '#FFEC87'\n        },\n        text: {\n            primary: '#373737',\n            secondary: '#757575'\n        },\n        error: {\n            main: '#d83b30'\n        }\n    }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { theme } from './utils/theme';\nimport { ThemeProvider } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}